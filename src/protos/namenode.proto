syntax = "proto3";

package protos;

option go_package = "../protos";

service NameNode {
  rpc FetchBlockAddrs(FetchBlockAddrsRequest) returns (FetchBlockAddrsReply) {}
  rpc RegisterDataNode(RegisterDataNodeRequest) returns (RegisterDataNodeReply) {}
  rpc Create(CreateRequest) returns (CreateReply) {}
  rpc Open(OpenRequest) returns (OpenReply) {}
  rpc LocsValidityNotify(LocsValidityNotifyRequest) returns (LocsValidityNotifyReply) {}
  rpc FetchFileInfo(FetchFileInfoRequest) returns (FetchFileInfoReply) {}
  rpc Rename(RenameRequest) returns (RenameReply) {}
  rpc IsLeader(IsLeaderRequest) returns (IsLeaderReply) {}
}

enum FetchBlockAddrsRequestType {
  OP_GET = 0;
  OP_PUT = 1;
  OP_REMOVE = 2;
}
message FetchBlockAddrsRequest {
  string path = 1;
  uint64 index = 2;
  FetchBlockAddrsRequestType type = 3;
}
message FetchBlockAddrsReply {
  repeated string addrs = 1;
  bytes uuid = 2;
}

message RegisterDataNodeRequest {
  string address = 1;
}
message RegisterDataNodeReply {
  uint64 blockSize = 1;
}

message CreateRequest {
  string path = 1;
  uint64 size = 2;
}
message CreateReply {
  uint64 blockSize = 1;
}

message OpenRequest {
  string path = 1;
}
message OpenReply {
  uint64 blockSize = 1;
  uint64 blocks = 2;
}

message LocsValidityNotifyRequest {
  bytes uuid = 1;
  map<string, bool> validity = 2;
}
message LocsValidityNotifyReply {}

message FileInfo {
  string name = 1;
  uint64 size = 2;
}
message FetchFileInfoRequest {
  string path = 1;
}
message FetchFileInfoReply {
  repeated FileInfo infos = 1;
}

message RenameRequest {
  string oldPath = 1;
  string newPath = 2;
}
message RenameReply {}

message IsLeaderRequest {}
message IsLeaderReply {}